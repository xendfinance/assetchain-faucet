
name: Build latest Release

on:
  push:
    branches:
      - 'master'
  workflow_dispatch:


jobs:

  build_binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-node@v3
      with:
        node-version: 18.15.0
    - run: npm install -g pkg

    - run: npm install
    - run: npm run build

    - run: pkg --compress Brotli .

    - name: Get project versions
      run: |
        echo "server_version=$(cat package.json | jq ".version" | tr -d '"\r\n')" >> $GITHUB_OUTPUT
        echo "client_version=$(cat faucet-client/package.json | jq ".version" | tr -d '"\r\n')" >> $GITHUB_OUTPUT
      id: version

    - name: Update latest tag & remove previous latest release
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}          
        script: |
          try {
            var latestTag = "latest";
            var latestRelease = await github.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: latestTag
            });
            if(latestRelease && latestRelease.data && latestRelease.data.tag_name == latestTag) {
              console.log("delete previous latest release");
              await github.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: latestRelease.data.id
              });
            }

            var latestRef = await github.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "tags/" + latestTag
            });
            if(latestRef && latestRef.data && latestRef.data.ref) {
              if(latestRef.data.object.sha !== context.sha) {
                await github.git.updateRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: "tags/" + latestTag,
                  sha: context.sha,
                });
              }
            }
            else {
              await github.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: "tags/" + latestTag,
                sha: context.sha,
              });
            }
          } catch (e) {
            console.log(e)
          }
    - name: Create latest release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: true
        release_name: "Latest Binaries"
        tag_name: "latest"
        body: |
          Latest automatically built executables.
          Built from master branch (commit: ${{ github.sha }})

          Server Version: ${{ steps.version.outputs.server_version }}
          Client Version: ${{ steps.version.outputs.client_version }}
          
          | Release File  | Description |
          | ------------- | ------------- |
          | [powfaucet-server-win.exe](https://github.com/pk910/PoWFaucet/releases/download/latest/powfaucet-server-win.exe) | PoWFaucet server executable for windows (64bit) |
          | [powfaucet-server-linux](https://github.com/pk910/PoWFaucet/releases/download/latest/powfaucet-server-linux) | PoWFaucet server executable for linux (64bit) |
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: "Upload artifact: powfaucet-server-linux"
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/pow-faucet-server-linux
        asset_name: powfaucet-server-linux
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: "Upload artifact: powfaucet-server-win.exe"
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/pow-faucet-server-win.exe
        asset_name: powfaucet-server-win.exe
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ github.token }}
  build_docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: pk910/powfaucet:latest